// Swagger UI Configuration for Syosetu API
window.swaggerConfig = {
  openapi: '3.0.0',
  info: {
    title: 'Syosetu API Backend',
    version: '3.0.0',
    description: `
# Syosetu API Backend

API ƒë·ªÉ scraping v√† truy xu·∫•t d·ªØ li·ªáu t·ª´ Syosetu.com v·ªõi c√°c t√≠nh nƒÉng:

- üìö **Metadata**: L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ ti·ªÉu thuy·∫øt
- üìñ **Content**: ƒê·ªçc n·ªôi dung chapter
- üîç **Search**: T√¨m ki·∫øm ti·ªÉu thuy·∫øt theo t·ª´ kh√≥a  
- üèÜ **Ranking**: Xem b·∫£ng x·∫øp h·∫°ng
- üìã **List**: Danh s√°ch ti·ªÉu thuy·∫øt m·ªõi nh·∫•t

## C√¥ng ngh·ªá s·ª≠ d·ª•ng
- **Backend**: Fastify + TypeScript
- **Scraping**: Cheerio (thay th·∫ø Puppeteer)
- **Deployment**: Vercel Serverless
- **Cache**: In-memory caching
- **Rate Limiting**: Built-in protection
    `,
    contact: {
      name: 'API Support',
      email: 'support@syosetu-api.com',
    },
    license: {
      name: 'MIT',
      url: 'https://opensource.org/licenses/MIT',
    },
  },
  servers: [
    {
      url: window.location.origin,
      description: 'Production Server (Vercel)',
    },
    {
      url: 'http://localhost:3000',
      description: 'Development Server',
    },
  ],
  tags: [
    {
      name: 'Health',
      description: 'Health check v√† status endpoints',
    },
    {
      name: 'Novel',
      description: 'Th√¥ng tin ti·ªÉu thuy·∫øt v√† metadata',
    },
    {
      name: 'Chapter',
      description: 'N·ªôi dung chapter v√† scraping',
    },
    {
      name: 'Search',
      description: 'T√¨m ki·∫øm ti·ªÉu thuy·∫øt',
    },
    {
      name: 'Ranking',
      description: 'Ranking v√† th·ªëng k√™',
    },
  ],
  paths: {
    '/health': {
      get: {
        tags: ['Health'],
        summary: 'Basic health check',
        description: 'Ki·ªÉm tra tr·∫°ng th√°i c∆° b·∫£n c·ªßa API',
        responses: {
          200: {
            description: 'API ƒëang ho·∫°t ƒë·ªông',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    data: {
                      type: 'object',
                      properties: {
                        status: { type: 'string', example: 'OK' },
                        message: {
                          type: 'string',
                          example: 'Syosetu API Backend v3.0 ƒëang ho·∫°t ƒë·ªông',
                        },
                        version: { type: 'string', example: '3.0.0' },
                        services: {
                          type: 'array',
                          items: { type: 'string' },
                          example: [
                            'Syosetu Official API',
                            'Web Scraping v·ªõi Cheerio',
                            'Caching v·ªõi NodeCache',
                          ],
                        },
                        endpoints: { type: 'object' },
                        features: { type: 'array', items: { type: 'string' } },
                        timestamp: { type: 'string', format: 'date-time' },
                      },
                    },
                    timestamp: { type: 'string', format: 'date-time' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/syosetu/status': {
      get: {
        tags: ['Health'],
        summary: 'Detailed service status',
        description:
          'Tr·∫°ng th√°i chi ti·∫øt bao g·ªìm cache stats v√† browser status',
        responses: {
          200: {
            description: 'Th√¥ng tin tr·∫°ng th√°i chi ti·∫øt',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean' },
                    data: {
                      type: 'object',
                      properties: {
                        status: { type: 'string' },
                        message: { type: 'string' },
                        version: { type: 'string' },
                        timestamp: { type: 'string' },
                        services: { type: 'object' },
                        cache: { type: 'object' },
                        browser: { type: 'object' },
                        features: { type: 'array', items: { type: 'string' } },
                        endpoints: { type: 'object' },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/health': {
      get: {
        tags: ['Health'],
        summary: 'Ki·ªÉm tra tr·∫°ng th√°i API',
        description:
          'Endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API v√† th√¥ng tin h·ªá th·ªëng',
        responses: {
          200: {
            description: 'API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'API ƒëang ho·∫°t ƒë·ªông' },
                    timestamp: { type: 'string', format: 'date-time' },
                    version: { type: 'string', example: '3.0.0' },
                    environment: { type: 'string', example: 'production' },
                    uptime: { type: 'number', example: 3600 },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/syosetu/novel/{ncode}': {
      get: {
        tags: ['Novel'],
        summary: 'L·∫•y th√¥ng tin ti·ªÉu thuy·∫øt',
        description:
          'L·∫•y metadata chi ti·∫øt c·ªßa ti·ªÉu thuy·∫øt t·ª´ API ch√≠nh th·ª©c Syosetu',
        parameters: [
          {
            name: 'ncode',
            in: 'path',
            required: true,
            description: 'M√£ ti·ªÉu thuy·∫øt Syosetu (v√≠ d·ª•: n4754kf, n9669bk)',
            schema: {
              type: 'string',
              pattern: '^n[0-9]+[a-z]+$',
              example: 'n4754kf',
            },
          },
        ],
        responses: {
          200: {
            description: 'Th√¥ng tin ti·ªÉu thuy·∫øt ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    data: {
                      type: 'object',
                      properties: {
                        ncode: { type: 'string', example: 'n4754kf' },
                        title: {
                          type: 'string',
                          example: 'Ëª¢Áîü„Åó„Åü„Çâ„Çπ„É©„Ç§„É†„Å†„Å£„Åü‰ª∂',
                        },
                        author: { type: 'string', example: '‰ºèÁÄ¨' },
                        description: {
                          type: 'string',
                          example: '„Çµ„É©„É™„Éº„Éû„É≥„ÅåÁï∞‰∏ñÁïå„Åß„Çπ„É©„Ç§„É†„Å´Ëª¢Áîü...',
                        },
                        chapters: { type: 'number', example: 248 },
                        status: { type: 'string', example: 'ÂÆåÁµêÊ∏à' },
                        genre: { type: 'string', example: '„Éè„Ç§„Éï„Ç°„É≥„Çø„Ç∏„Éº' },
                        keywords: { type: 'array', items: { type: 'string' } },
                        lastUpdate: { type: 'string', format: 'date-time' },
                      },
                    },
                    cached: { type: 'boolean', example: false },
                    timestamp: { type: 'string', format: 'date-time' },
                  },
                },
              },
            },
          },
          404: {
            description: 'Kh√¥ng t√¨m th·∫•y ti·ªÉu thuy·∫øt',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    error: {
                      type: 'string',
                      example: 'Kh√¥ng t√¨m th·∫•y ti·ªÉu thuy·∫øt',
                    },
                    message: {
                      type: 'string',
                      example: 'Ncode n4754kf kh√¥ng t·ªìn t·∫°i',
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/syosetu/novel/{ncode}/chapter/{chapter}': {
      get: {
        tags: ['Chapter'],
        summary: 'L·∫•y n·ªôi dung chapter',
        description: 'Scraping n·ªôi dung chapter t·ª´ Syosetu b·∫±ng Cheerio',
        parameters: [
          {
            name: 'ncode',
            in: 'path',
            required: true,
            description: 'M√£ ti·ªÉu thuy·∫øt',
            schema: { type: 'string', example: 'n4754kf' },
          },
          {
            name: 'chapter',
            in: 'path',
            required: true,
            description: 'S·ªë chapter (b·∫Øt ƒë·∫ßu t·ª´ 1)',
            schema: { type: 'integer', minimum: 1, example: 1 },
          },
        ],
        responses: {
          200: {
            description: 'N·ªôi dung chapter ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    data: {
                      type: 'object',
                      properties: {
                        ncode: { type: 'string', example: 'n4754kf' },
                        chapter: { type: 'number', example: 1 },
                        title: { type: 'string', example: '„Éó„É≠„É≠„Éº„Ç∞„ÄÄËª¢Áîü' },
                        content: {
                          type: 'string',
                          example: '„Çµ„É©„É™„Éº„Éû„É≥„ÅÆ‰∏â‰∏äÊÇü„ÅØÈÄö„ÇäÈ≠î„Å´Âà∫„Åï„Çå...',
                        },
                        wordCount: { type: 'number', example: 2500 },
                        publishDate: { type: 'string', format: 'date-time' },
                      },
                    },
                    cached: { type: 'boolean', example: false },
                    timestamp: { type: 'string', format: 'date-time' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/syosetu/novel/{ncode}/chapters': {
      post: {
        tags: ['Chapter'],
        summary: 'L·∫•y nhi·ªÅu chapter',
        description: 'L·∫•y n·ªôi dung nhi·ªÅu chapter c√πng l√∫c (t·ªëi ƒëa 10 chapter)',
        parameters: [
          {
            name: 'ncode',
            in: 'path',
            required: true,
            description: 'M√£ ti·ªÉu thuy·∫øt',
            schema: { type: 'string' },
            example: 'n4754kf',
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  chapters: {
                    type: 'array',
                    items: { type: 'integer', minimum: 1 },
                    maxItems: 10,
                    example: [1, 2, 3],
                  },
                },
                required: ['chapters'],
              },
            },
          },
        },
        responses: {
          200: {
            description: 'K·∫øt qu·∫£ l·∫•y nhi·ªÅu chapter',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean' },
                    data: {
                      type: 'object',
                      properties: {
                        ncode: { type: 'string' },
                        totalRequested: { type: 'number' },
                        successful: { type: 'number' },
                        failed: { type: 'number' },
                        chapters: { type: 'array' },
                        errors: { type: 'array' },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/syosetu/search': {
      get: {
        tags: ['Search'],
        summary: 'T√¨m ki·∫øm ti·ªÉu thuy·∫øt',
        description: 'T√¨m ki·∫øm ti·ªÉu thuy·∫øt theo t·ª´ kh√≥a v·ªõi c√°c b·ªô l·ªçc',
        parameters: [
          {
            name: 'keyword',
            in: 'query',
            required: true,
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
            schema: { type: 'string', example: 'Áï∞‰∏ñÁïå' },
          },
          {
            name: 'limit',
            in: 'query',
            required: false,
            description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 20, t·ªëi ƒëa: 100)',
            schema: { type: 'integer', default: 20, maximum: 100, example: 20 },
          },
          {
            name: 'genre',
            in: 'query',
            required: false,
            description: 'Th·ªÉ lo·∫°i ti·ªÉu thuy·∫øt',
            schema: {
              type: 'string',
              enum: [
                '„Éè„Ç§„Éï„Ç°„É≥„Çø„Ç∏„Éº',
                '„É≠„Éº„Éï„Ç°„É≥„Çø„Ç∏„Éº',
                'ÁèæÂÆü‰∏ñÁïå',
                'ÊÅãÊÑõ',
              ],
              example: '„Éè„Ç§„Éï„Ç°„É≥„Çø„Ç∏„Éº',
            },
          },
        ],
        responses: {
          200: {
            description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          ncode: { type: 'string', example: 'n4754kf' },
                          title: {
                            type: 'string',
                            example: 'Ëª¢Áîü„Åó„Åü„Çâ„Çπ„É©„Ç§„É†„Å†„Å£„Åü‰ª∂',
                          },
                          author: { type: 'string', example: '‰ºèÁÄ¨' },
                          description: { type: 'string' },
                          genre: { type: 'string' },
                          chapters: { type: 'number' },
                        },
                      },
                    },
                    total: { type: 'number', example: 150 },
                    page: { type: 'number', example: 1 },
                    limit: { type: 'number', example: 20 },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/api/syosetu/ranking': {
      get: {
        tags: ['Ranking'],
        summary: 'L·∫•y b·∫£ng x·∫øp h·∫°ng',
        description:
          'L·∫•y b·∫£ng x·∫øp h·∫°ng ti·ªÉu thuy·∫øt theo c√°c ti√™u ch√≠ kh√°c nhau',
        parameters: [
          {
            name: 'type',
            in: 'query',
            required: false,
            description: 'Lo·∫°i ranking',
            schema: {
              type: 'string',
              enum: ['daily', 'weekly', 'monthly', 'total'],
              default: 'daily',
              example: 'daily',
            },
          },
          {
            name: 'limit',
            in: 'query',
            required: false,
            description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£',
            schema: { type: 'integer', default: 50, maximum: 100, example: 50 },
          },
        ],
        responses: {
          200: {
            description: 'B·∫£ng x·∫øp h·∫°ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          rank: { type: 'number', example: 1 },
                          ncode: { type: 'string', example: 'n4754kf' },
                          title: { type: 'string' },
                          author: { type: 'string' },
                          points: { type: 'number', example: 15420 },
                        },
                      },
                    },
                    rankingType: { type: 'string', example: 'daily' },
                    updatedAt: { type: 'string', format: 'date-time' },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
  components: {
    schemas: {
      Error: {
        type: 'object',
        properties: {
          success: { type: 'boolean', example: false },
          error: { type: 'string' },
          message: { type: 'string' },
          timestamp: { type: 'string', format: 'date-time' },
        },
      },
    },
  },
};

// Initialize Swagger UI
function initSwaggerUI() {
  if (typeof SwaggerUIBundle !== 'undefined') {
    SwaggerUIBundle({
      spec: window.swaggerConfig,
      dom_id: '#swagger-ui',
      deepLinking: true,
      presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],
      plugins: [SwaggerUIBundle.plugins.DownloadUrl],
      layout: 'StandaloneLayout',
      tryItOutEnabled: true,
      supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
      onComplete: function () {
        console.log('‚úÖ Swagger UI loaded successfully');
      },
      onFailure: function (error) {
        console.error('‚ùå Swagger UI failed to load:', error);
      },
    });
  } else {
    console.error('‚ùå SwaggerUIBundle not found');
  }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { swaggerConfig: window.swaggerConfig, initSwaggerUI };
}

console.log('‚úÖ Swagger config loaded successfully!');
